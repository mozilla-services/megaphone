# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_EMAIL   - login info for docker hub
# DOCKER_USER
# DOCKER_PASS
#
version: 2.1
commands:
  run-tests:
    steps:
      - run:
          name: cargo test
          command: cargo test --all --verbose

defaults:
    docker_login: &docker_login
      run:
          name: Login to Dockerhub
          command: |
              if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
                  echo "Skipping Login to Dockerhub, no credentials."
              else
                  echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
              fi
jobs:
  # testing requires a database. Package also uses "nightly", which breaks clippy and
  # audit. Skipping testing for now.
  build:
    docker:
      - image: circleci/rust:latest
        auth:
            username: $DOCKER_USER
            password: $DOCKER_PASS
        environment:
            ROCKET_DATABASE_URL: mysql://test:test@127.0.0.1/megaphone
            RUST_BACKTRACE: 1
            # XXX: begin_test_transaction doesn't play nice over threaded tests
            RUST_TEST_THREADS: 1
      - image: circleci/mysql:5.7-ram
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
            MYSQL_ROOT_PASSWORD: random
            MYSQL_USER: test
            MYSQL_PASSWORD: test
            MYSQL_DATABASE: megaphone
    steps:
      - checkout
      - setup_remote_docker
      - *docker_login
      - run-tests

      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build Docker image
          command: docker build -t app:build .

      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: |
            mkdir -p /home/circleci/cache
            docker save -o /home/circleci/cache/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{epoch}}
          paths:
            - /home/circleci/cache/docker.tar

  deploy:
    docker:
      - image: docker:18.03.0-ce
        auth:
            username: $DOCKER_USER
            password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /home/circleci/cache/docker.tar
      - *docker_login
      - run:
          name: Deploy to Dockerhub
          command: |
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag app:build ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag app:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only: master
